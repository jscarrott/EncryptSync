package core;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.security.spec.InvalidKeySpecException;

import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.interfaces.PBEKey;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.SecretKeySpec;

public class User {
    
	SecretKey passwordKey; //This should equal the key generated by the PBE algorithm used to encrypt all the files need to be properly seasoned
	String name; // name of the user to be used in the future for possible multiple accounts
	public String getName() {
		return name;
	}

	public Directory getInputDirectory() {
		return inputDirectory;
	}

	public Directory getOutputDirectory() {
		return outputDirectory;
	}

	Directory inputDirectory; //input directory for unencrypted files
	Directory outputDirectory; //output directory for encrypted files
	private byte[] salt; // Stores the seasoning for the PBE algorithm.
	
	
	public User(String nameIn, String in, String out){//initialise the user object with values for everything but the password key that needs extra specific method
		name = nameIn;
		inputDirectory = new Directory( in);
		outputDirectory = new Directory( out);
	}

	public SecretKey getPasswordKey() {
		return passwordKey;
	}

	public void setPasswordKey(SecretKey passwordKey) {
		this.passwordKey = passwordKey;
	}
	
	public byte[] saltCheck() throws  NoSuchAlgorithmException, IOException{//Checks if there is a salt file for the user and if not creates one the saves it to a unique file
		File saltCheck = new File(name + ".salt");
		boolean exists = saltCheck.exists();
		
		if(exists){
			FileInputStream in = new FileInputStream(saltCheck);
			byte[] salty = new byte[(int) saltCheck.length()];
			in.read(salty);
			salt = salty;
			in.close();
			return salt;
			
		}
		else{
			SecureRandom rand = SecureRandom.getInstance("SHA1PRNG");// need to add in proper exception handling
			byte[] salty = new byte[16];
			rand.nextBytes(salty);
			salt = salty;
			FileOutputStream saltOutput = new FileOutputStream(name + ".salt");
			saltOutput.write(salt);
			saltOutput.close();
			return salt;
		}
		

	}
	
	void generatePasswordKey(String passwordInput) throws NoSuchAlgorithmException, IOException, InvalidKeySpecException{//Takes a password input in the form of a string then runs the PBKDF2WithHmacSHA1 algorithm on it, formats it for AES
		PBEKeySpec password = new PBEKeySpec(passwordInput.toCharArray(), saltCheck(), 10000, 128);
		SecretKeyFactory factory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA1");
		PBEKey key = (PBEKey) factory.generateSecret(password);
		passwordKey = new SecretKeySpec(key.getEncoded(), "AES");
		
	}
}

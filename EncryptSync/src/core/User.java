package core;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.security.spec.InvalidKeySpecException;

import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.interfaces.PBEKey;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.SecretKeySpec;

public class User {
	/**
	 * The user class stores information required for a specific syncing of a
	 * directory
	 * 
	 * @param passwordKey This should equal the key generated by the PBE algorithm usedto encrypt all the files need to be properly seasoned
	 * @param name
	 *            name of the user to be used in the future for possible
	 *            multiple accounts
	 * @param keyVerified
	 *            true when the key has been verified
	 * @param referenceFile
	 *            file location for the test file used to verify the key
	 * @param unencryptedDirectory
	 *            input directory for unecnrypted Files
	 * @param encryptedDirectory
	 *            output directory for encrypted Files
	 * @param salt
	 *            Stores the seasoning for the PBE algorithm.
	 */
	SecretKey passwordKey;
	String name; // name of the user to be used in the future for possible
					// multiple accounts
	boolean keyVerified;//
	File referenceFile;// file location for the test file used to verify the key

	public String getName() {
		return name;
	}

	public Directory getUnencryptedDirectory() {
		return unencryptedDirectory;
	}

	public Directory getEncryptedDirectory() {
		return encryptedDirectory;
	}

	Directory unencryptedDirectory; // input directory for unencrypted files
	Directory encryptedDirectory; // output directory for encrypted files
	private byte[] salt; // Stores the seasoning for the PBE algorithm.
	/** Initialize the user
	 object with values
	 for everything but
	the password key that
	 needs extra specific
	 method and checks
	 whether the password
	 check reference file
	exists.*/
	public User(String nameIn, String in, String out) {
		name = nameIn;
		unencryptedDirectory = new Directory(in);
		encryptedDirectory = new Directory(out);
		referenceFile = new File(encryptedDirectory.getLocation()
				+ "\\reference." + name);
	}

	public SecretKey getPasswordKey() {
		return passwordKey;
	}

	public void setPasswordKey(SecretKey passwordKey) {
		this.passwordKey = passwordKey;
	}

	/**
	 * Checks if there is a salt file for the user and if not creates one the
	 * saves it to a unique file
	 * 
	 * @return returns the salt as a byte array if needed
	 * @throws NoSuchAlgorithmException
	 * @throws IOException
	 */

	public byte[] saltCheck() throws NoSuchAlgorithmException, IOException {
		File saltCheck = new File(name + ".salt");
		boolean exists = saltCheck.exists();

		if (exists) {
			FileInputStream in = new FileInputStream(saltCheck);
			byte[] salty = new byte[(int) saltCheck.length()];
			in.read(salty);
			salt = salty;
			in.close();
			return salt;

		} else {
			SecureRandom rand = SecureRandom.getInstance("SHA1PRNG");// need to
																		// add
																		// in
																		// proper
																		// exception
																		// handling
			byte[] salty = new byte[16];
			rand.nextBytes(salty);
			salt = salty;
			FileOutputStream saltOutput = new FileOutputStream(name + ".salt");
			saltOutput.write(salt);
			saltOutput.close();
			return salt;
		}

	}

	/**
	 * Takes a password input in the form of a string then runs the
	 * PBKDF2WithHmacSHA1 algorithm on it, formats it for AES
	 * 
	 * @param passwordInput
	 * @throws NoSuchAlgorithmException
	 * @throws IOException
	 * @throws InvalidKeySpecException
	 */
	public void generatePasswordKey(String passwordInput)
			throws NoSuchAlgorithmException, IOException,
			InvalidKeySpecException {
		PBEKeySpec password = new PBEKeySpec(passwordInput.toCharArray(),
				saltCheck(), 10000, 128);
		SecretKeyFactory factory = SecretKeyFactory
				.getInstance("PBKDF2WithHmacSHA1");
		PBEKey key = (PBEKey) factory.generateSecret(password);
		passwordKey = new SecretKeySpec(key.getEncoded(), "AES");

	}
}
